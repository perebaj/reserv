openapi: 3.0.0
info:
  title: Reserv API
  description: API for managing property listings and images
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local development server

components:
  schemas:
    Property:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the property
        host_id:
          type: string
          format: uuid
          description: Unique identifier for the host
        title:
          type: string
          description: Title of the property
        description:
          type: string
          description: Description of the property
        price_per_night_cents:
          type: integer
          description: Price per night in cents
        currency:
          type: string
          description: Currency code (e.g., USD, BRL)
        amenities:
          type: array
          items:
            $ref: '#/components/schemas/Amenity'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - host_id
        - title
        - description
        - price_per_night_cents
        - currency
        - updated_at

    Amenity:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the amenity
        name:
          type: string
          description: Name of the amenity
        created_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - created_at

    Image:
      type: object
      properties:
        id:
          type: string
          description: Cloudflare image ID
        filename:
          type: string
          description: Original filename
        variants:
          type: array
          items:
            type: string
          description: Available image variants
      required:
        - id
        - filename
        - variants

    APIError:
      type: object
      properties:
        message:
          type: string
          description: Error message
        details:
          type: string
          description: Detailed error information
        status:
          type: integer
          description: HTTP status code
      required:
        - message
        - status

paths:
  /properties:
    get:
      summary: List all properties
      description: Returns a list of all properties with their amenities
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'

    post:
      summary: Create a new property
      description: Creates a new property listing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '201':
          description: Property created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'

  /properties/{id}:
    parameters:
      - name: id
        in: query
        required: true
        schema:
          type: string
          format: uuid
        description: Property ID

    get:
      summary: Get property by ID
      description: Returns a single property by its ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '404':
          description: Property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'

    put:
      summary: Update property
      description: Updates an existing property
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '200':
          description: Property updated successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '404':
          description: Property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'

    delete:
      summary: Delete property
      description: Deletes a property and its associated amenities
      responses:
        '200':
          description: Property deleted successfully
        '404':
          description: Property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'

  /images:
    post:
      summary: Upload an image
      description: Uploads an image to Cloudflare Images
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Image file to upload
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
