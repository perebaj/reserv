// Code generated by MockGen. DO NOT EDIT.
// Source: images.go
//
// Generated by this command:
//
//	mockgen -source images.go -destination ../mock/images.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	cloudflare "github.com/cloudflare/cloudflare-go"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudFlareAPI is a mock of CloudFlareAPI interface.
type MockCloudFlareAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudFlareAPIMockRecorder
}

// MockCloudFlareAPIMockRecorder is the mock recorder for MockCloudFlareAPI.
type MockCloudFlareAPIMockRecorder struct {
	mock *MockCloudFlareAPI
}

// NewMockCloudFlareAPI creates a new mock instance.
func NewMockCloudFlareAPI(ctrl *gomock.Controller) *MockCloudFlareAPI {
	mock := &MockCloudFlareAPI{ctrl: ctrl}
	mock.recorder = &MockCloudFlareAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudFlareAPI) EXPECT() *MockCloudFlareAPIMockRecorder {
	return m.recorder
}

// UploadImage mocks base method.
func (m *MockCloudFlareAPI) UploadImage(ctx context.Context, container *cloudflare.ResourceContainer, params cloudflare.UploadImageParams) (cloudflare.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", ctx, container, params)
	ret0, _ := ret[0].(cloudflare.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockCloudFlareAPIMockRecorder) UploadImage(ctx, container, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockCloudFlareAPI)(nil).UploadImage), ctx, container, params)
}
