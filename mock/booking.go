// Code generated by MockGen. DO NOT EDIT.
// Source: booking.go
//
// Generated by this command:
//
//	mockgen -source booking.go -destination ../mock/booking.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	reserv "github.com/perebaj/reserv"
	gomock "go.uber.org/mock/gomock"
)

// MockBookingRepository is a mock of BookingRepository interface.
type MockBookingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookingRepositoryMockRecorder
}

// MockBookingRepositoryMockRecorder is the mock recorder for MockBookingRepository.
type MockBookingRepositoryMockRecorder struct {
	mock *MockBookingRepository
}

// NewMockBookingRepository creates a new mock instance.
func NewMockBookingRepository(ctrl *gomock.Controller) *MockBookingRepository {
	mock := &MockBookingRepository{ctrl: ctrl}
	mock.recorder = &MockBookingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingRepository) EXPECT() *MockBookingRepositoryMockRecorder {
	return m.recorder
}

// Bookings mocks base method.
func (m *MockBookingRepository) Bookings(ctx context.Context, filter reserv.BookingFilter) ([]reserv.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bookings", ctx, filter)
	ret0, _ := ret[0].([]reserv.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bookings indicates an expected call of Bookings.
func (mr *MockBookingRepositoryMockRecorder) Bookings(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bookings", reflect.TypeOf((*MockBookingRepository)(nil).Bookings), ctx, filter)
}

// CreateBooking mocks base method.
func (m *MockBookingRepository) CreateBooking(ctx context.Context, booking reserv.Booking) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", ctx, booking)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBooking indicates an expected call of CreateBooking.
func (mr *MockBookingRepositoryMockRecorder) CreateBooking(ctx, booking any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockBookingRepository)(nil).CreateBooking), ctx, booking)
}

// DeleteBooking mocks base method.
func (m *MockBookingRepository) DeleteBooking(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBooking", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBooking indicates an expected call of DeleteBooking.
func (mr *MockBookingRepositoryMockRecorder) DeleteBooking(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBooking", reflect.TypeOf((*MockBookingRepository)(nil).DeleteBooking), ctx, id)
}

// GetBooking mocks base method.
func (m *MockBookingRepository) GetBooking(ctx context.Context, id string) (int, reserv.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooking", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(reserv.Booking)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBooking indicates an expected call of GetBooking.
func (mr *MockBookingRepositoryMockRecorder) GetBooking(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooking", reflect.TypeOf((*MockBookingRepository)(nil).GetBooking), ctx, id)
}
